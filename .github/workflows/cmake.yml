name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Clone vlc
      run: |
        git clone https://github.com/videolan/vlc
        cd vlc
        git checkout 3.0.x
    - name: Setup libVLC
      run: |
        sudo apt-get update
        DEBIAN_FRONTEND=noninteractive
        sudo apt-get install -y git build-essential pkg-config libtool automake autopoint gettext
        sudo apt-get install -y subversion yasm cvs cmake ragel
        sudo apt-get install -y flex bison libavcodec-dev libavformat-dev libswscale-dev liba52-0.7.4-dev libasound2-dev
        sudo apt-get install -y mesa-common-dev

        # Windows 32bits and 64bits cross
        sudo apt-get install -y gcc-mingw-w64-i686 g++-mingw-w64-i686 mingw-w64-tools
        sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64 mingw-w64-tools
        sudo apt-get install -y subversion yasm cvs cmake ragel autopoint
        sudo apt-get install -y libtool automake autoconf autopoint make gettext pkg-config
        sudo apt-get install -y cvs meson gperf
        sudo apt-get install -y wine64-development-tools libwine-dev zip p7zip nsis bzip2
        sudo apt-get install -y ant default-jdk protobuf-compiler dos2unix
    # - name: Compile libVLC (ThirdParty) Windows
    #   run: |
    #     cd vlc
    #     mkdir -p contrib/win32
    #     cd contrib/win32
    #     ../bootstrap --host=x86_64-w64-mingw32
    #     make fetch
    #     make
    #     rm -f ../i686-w64-mingw32/bin/moc ../i686-w64-mingw32/bin/uic ../i686-w64-mingw32/bin/rcc
    - name: Compile libVLC Windows
      run: |
        cd vlc
        ./bootstrap
        mkdir -p win32/ && cd win32
        export PKG_CONFIG_LIBDIR=$HOME/vlc/contrib/x86_64-w64-mingw32/lib/pkgconfig
        ../extras/package/win32/configure.sh --host=x86_64-w64-mingw32 --build=x86_64-pc-linux-gnu --disable-lua --disable-xcb --disable-qt --enable-static --disable-vlc --disable-shared --disable-glx
        ../configure --host=x86_64-w64-mingw32 --build=x86_64-pc-linux-gnu --disable-lua --disable-xcb --disable-qt --enable-static --disable-vlc --disable-shared --disable-glx
        make
        sudo make install
    - name: Compile libVLC Linux
      run: |
        cd vlc
        mkdir -p linux-build/
        cd linux-build
        ../bootstrap
        ../configure --disable-lua --disable-xcb --disable-qt --enable-static --disable-vlc --disable-shared --disable-glx
        make
        sudo make install
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

#    - name: Test
#      working-directory: ${{github.workspace}}/build
#      # Execute tests defined by the CMake configuration.  
#      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#      run: ctest -C ${{env.BUILD_TYPE}}
      
